/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xpwm_ctrl.h"
#include "xparameters.h"
//#include <stdbool.h>
#include "sleep.h"

#define PWM_TERMINAL 0

int PWM_init(XPwm_ctrl *PwmPtr){

	XPwm_ctrl_Config *CfgPwmPtr;
	int status;

	CfgPwmPtr = XPwm_ctrl_LookupConfig(XPAR_XPWM_CTRL_0_DEVICE_ID);

	if (!CfgPwmPtr) {
		print("ERROR: Configuration failed.\n\r");
		return XST_FAILURE;
	}

	status = XPwm_ctrl_CfgInitialize(PwmPtr, CfgPwmPtr);

	if (status != XST_SUCCESS) {
		print("ERROR: Could not initialize.\n\r");
	return XST_FAILURE;
	}

	return status;
}

int main()
{

	XPwm_ctrl PWM_CTRL;
	int status;
	u32 EN = 1;
	u32 Rst = 0;

#if	PWM_TERMINAL
	u32 LoadValPer;
#endif
	u32 LoadVal;

    init_platform();

    print("Program to test communication with HLS PWM peripheral in PL\n\r");

    //check
    status = PWM_init(&PWM_CTRL);
    if(status != XST_SUCCESS){
		print("HLS peripheral setup failed\n\r");
    } else {
    	print("HLS peripheral check done\n\r");
    }

    printf("XPwm_ctrl_IsReady = %x\n\r", XPwm_ctrl_IsReady(&PWM_CTRL));

    while(1){

    	XPwm_ctrl_Set_EN_V(&PWM_CTRL, EN);  //enable counter
    	XPwm_ctrl_Set_Rst_V(&PWM_CTRL, Rst);//assert soft rst to low

#if	PWM_TERMINAL
    	print("Enter Duty cycle in percents \n\r");
        scanf("%d", &LoadValPer);
        LoadVal = LoadValPer*65535/100; //get the number of ticks
        printf("LoadVal = %d\n\r", LoadVal);
        XPwm_ctrl_Set_LoadValCnt_V(&PWM_CTRL, LoadVal);
#else
        for(int i = 0; i<=100; i++){
    	printf("LoadVal = %d\n\r", i);
        XPwm_ctrl_Set_LoadValCnt_V(&PWM_CTRL, i*65535/100);
        usleep(100000);
        }
#endif

    }

    cleanup_platform();
    return 0;
}



