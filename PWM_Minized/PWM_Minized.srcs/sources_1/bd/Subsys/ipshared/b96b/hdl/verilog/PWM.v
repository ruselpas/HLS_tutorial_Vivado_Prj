// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="PWM,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z007sclg225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.055000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=17,HLS_SYN_LUT=56,HLS_VERSION=2018_2}" *)

module PWM (
        ap_clk,
        ap_rst_n,
        LoadValCnt_V,
        EN_V,
        Rst_V,
        OutPWM_V
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [15:0] LoadValCnt_V;
input  [0:0] EN_V;
input  [0:0] Rst_V;
output  [0:0] OutPWM_V;

 reg    ap_rst_n_inv;
reg   [15:0] counter_V;
wire   [15:0] storemerge_fu_92_p3;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] lhs_V_fu_74_p2;
wire   [0:0] r_V_fu_80_p2;
wire   [15:0] tmp_2_fu_86_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 counter_V = 16'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        counter_V <= storemerge_fu_92_p3;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutPWM_V = ((counter_V < LoadValCnt_V) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign lhs_V_fu_74_p2 = (1'd1 ^ Rst_V);

assign r_V_fu_80_p2 = (lhs_V_fu_74_p2 & EN_V);

assign storemerge_fu_92_p3 = ((r_V_fu_80_p2[0:0] === 1'b1) ? tmp_2_fu_86_p2 : 16'd0);

assign tmp_2_fu_86_p2 = (counter_V + 16'd1);

endmodule //PWM
